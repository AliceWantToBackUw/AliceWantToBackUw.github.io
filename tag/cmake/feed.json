{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"cmake\" tag",
    "description": "",
    "home_page_url": "https://alicewanttobackuw.github.io",
    "items": [
        {
            "id": "https://alicewanttobackuw.github.io/2024/04/21/Visual%20Studio%20Code%E4%BD%BF%E7%94%A8CMake/",
            "url": "https://alicewanttobackuw.github.io/2024/04/21/Visual%20Studio%20Code%E4%BD%BF%E7%94%A8CMake/",
            "title": "Visual Studio Code使用CMake",
            "date_published": "2024-04-21T06:05:15.000Z",
            "content_html": "<blockquote>\n<p>📢 声明：<br />\n转载，请先标注出处哦！编写不易，尊重一下劳动成果哦！<br />\n个人博客网站 \t==》<a href=\"https://alicewanttobackuw.github.io/\">https://alicewanttobackuw.github.io/</a><br />\ngithub\t==》<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FsaWNlV2FudFRvQmFja1V3\">https://github.com/AliceWantToBackUw</span><br />\ncsdn\t==》<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbmd5dWUyOQ==\">https://blog.csdn.net/lengyue29</span></p>\n</blockquote>\n<h1 id=\"visual-studio-code使用cmake\"><a class=\"anchor\" href=\"#visual-studio-code使用cmake\">#</a> Visual Studio Code 使用 CMake</h1>\n<h2 id=\"1前置条件\"><a class=\"anchor\" href=\"#1前置条件\">#</a> 1\t前置条件</h2>\n<ul>\n<li>安装 <code>CMake</code> ：通过 <code>cmake -version</code>  检查有无安装成功</li>\n<li>安装 <code>MinGW</code> （目录 3.2 需要）：参考文章<span class=\"exturl\" data-url=\"aHR0cDovL3QuY3NkbmltZy5jbi85Sm81Wg==\"> http://t.csdnimg.cn/9Jo5Z</span></li>\n</ul>\n<h2 id=\"2创建一个简单项目\"><a class=\"anchor\" href=\"#2创建一个简单项目\">#</a> 2\t创建一个简单项目</h2>\n<pre><code class=\"language-c++\">//-------head.h\n#ifndef _HEAD_H\n#define _HEAD_H\n// 加法\nint add(int a, int b);\n// 减法\nint subtract(int a, int b);\n// 乘法\nint multiply(int a, int b);\n// 除法\ndouble divide(int a, int b);\n#endif\n\n\n//-------add.cpp\n#include &lt;stdio.h&gt;\n#include &quot;head.h&quot;\n\nint add(int a, int b)\n&#123;\n  return a + b;\n&#125;\n\n\n//-------div.cpp\n#include &lt;stdio.h&gt;\n#include &quot;head.h&quot;\n\ndouble divide(int a, int b)\n&#123;\n  return (double)a / b;\n&#125;\n\n\n\n//-------mul.cpp\n#include &lt;stdio.h&gt;\n#include &quot;head.h&quot;\n\nint multiply(int a, int b)\n&#123;\n  return a * b;\n&#125;\n\n\n\n//-------sub.cpp\n#include &lt;stdio.h&gt;\n#include &quot;head.h&quot;\n\n// 减法\nint subtract(int a, int b)\n&#123;\n  return a - b;\n&#125;\n\n\n\n//-------main.cpp\n#include &lt;stdio.h&gt;\n#include &quot;head.h&quot;\n\nint main()\n&#123;\n  int a = 20;\n  int b = 12;\n  printf(&quot;a = %d, b = %d\\n&quot;, a, b);\n  printf(&quot;a + b = %d\\n&quot;, add(a, b));\n  printf(&quot;a - b = %d\\n&quot;, subtract(a, b));\n  printf(&quot;a * b = %d\\n&quot;, multiply(a, b));\n  printf(&quot;a / b = %f\\n&quot;, divide(a, b));\n  return 0;\n&#125;\n\n</code></pre>\n<h3 id=\"项目结构\"><a class=\"anchor\" href=\"#项目结构\">#</a> 项目结构</h3>\n<pre><code class=\"language-c++\">03cmake\n├─ .vscode\n│  ├─ c_cpp_properties.json\n│  └─ tasks.json\n├─ add.cpp\n├─ CMakeLists.txt\n├─ div.cpp\n├─ head.h\n├─ main.cpp\n├─ mult.cpp\n└─ sub.cpp\n\n</code></pre>\n<h2 id=\"3windows下生成可执行程序\"><a class=\"anchor\" href=\"#3windows下生成可执行程序\">#</a> 3\tWindows 下生成可执行程序</h2>\n<h3 id=\"31通过生成vs项目再由vs编译生成而得\"><a class=\"anchor\" href=\"#31通过生成vs项目再由vs编译生成而得\">#</a> 3.1\t通过生成 vs 项目，再由 vs 编译生成而得</h3>\n<blockquote>\n<p>参考文章：<span class=\"exturl\" data-url=\"aHR0cDovL3QuY3NkbmltZy5jbi96UVA1Nw==\">http://t.csdnimg.cn/zQP57</span></p>\n</blockquote>\n<p>在 windows 环境下，在根目录使用下列命令，会默认生成 <code>Visual Studio</code>  项目工程文件</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake .</pre></td></tr></table></figure><p>此时的项目结构变成了</p>\n<pre><code>03cmake\n├─ .vscode\n│  ├─ c_cpp_properties.json\n│  └─ tasks.json\n├─ 03make.vcxproj\n├─ 03make.vcxproj.filters\n├─ add.cpp\n├─ ALL_BUILD.vcxproj\n├─ ALL_BUILD.vcxproj.filters\n├─ CMakeCache.txt\n├─ CMakeFiles\n│  ├─ 3.29.0-rc4\n│  │  ├─ CMakeCCompiler.cmake\n│  │  ├─ CMakeCXXCompiler.cmake\n│  │  ├─ CMakeDetermineCompilerABI_C.bin\n│  │  ├─ CMakeDetermineCompilerABI_CXX.bin\n│  │  ├─ CMakeRCCompiler.cmake\n│  │  ├─ CMakeSystem.cmake\n│  │  ├─ CompilerIdC\n│  │  │  ├─ CMakeCCompilerId.c\n│  │  │  ├─ CompilerIdC.exe\n│  │  │  ├─ CompilerIdC.vcxproj\n│  │  │  ├─ Debug\n│  │  │  │  ├─ CMakeCCompilerId.obj\n│  │  │  │  ├─ CompilerIdC.exe.recipe\n│  │  │  │  └─ CompilerIdC.tlog\n│  │  │  │     ├─ CL.command.1.tlog\n│  │  │  │     ├─ CL.read.1.tlog\n│  │  │  │     ├─ CL.write.1.tlog\n│  │  │  │     ├─ CompilerIdC.lastbuildstate\n│  │  │  │     ├─ link.command.1.tlog\n│  │  │  │     ├─ link.read.1.tlog\n│  │  │  │     └─ link.write.1.tlog\n│  │  │  └─ tmp\n│  │  ├─ CompilerIdCXX\n│  │  │  ├─ CMakeCXXCompilerId.cpp\n│  │  │  ├─ CompilerIdCXX.exe\n│  │  │  ├─ CompilerIdCXX.vcxproj\n│  │  │  ├─ Debug\n│  │  │  │  ├─ CMakeCXXCompilerId.obj\n│  │  │  │  ├─ CompilerIdCXX.exe.recipe\n│  │  │  │  └─ CompilerIdCXX.tlog\n│  │  │  │     ├─ CL.command.1.tlog\n│  │  │  │     ├─ CL.read.1.tlog\n│  │  │  │     ├─ CL.write.1.tlog\n│  │  │  │     ├─ CompilerIdCXX.lastbuildstate\n│  │  │  │     ├─ link.command.1.tlog\n│  │  │  │     ├─ link.read.1.tlog\n│  │  │  │     └─ link.write.1.tlog\n│  │  │  └─ tmp\n│  │  ├─ VCTargetsPath.txt\n│  │  ├─ VCTargetsPath.vcxproj\n│  │  └─ x64\n│  │     └─ Debug\n│  │        ├─ VCTargetsPath.recipe\n│  │        └─ VCTargetsPath.tlog\n│  │           └─ VCTargetsPath.lastbuildstate\n│  ├─ c1c397eb2ba1589aadad67e99cf541fa\n│  │  └─ generate.stamp.rule\n│  ├─ cmake.check_cache\n│  ├─ CMakeConfigureLog.yaml\n│  ├─ CMakeScratch\n│  ├─ generate.stamp\n│  ├─ generate.stamp.depend\n│  ├─ generate.stamp.list\n│  ├─ pkgRedirects\n│  └─ TargetDirectories.txt\n├─ CMakeLists.txt\n├─ cmake_install.cmake\n├─ demo.sln\n├─ div.cpp\n├─ head.h\n├─ main.cpp\n├─ mult.cpp\n├─ README.md\n├─ sub.cpp\n├─ ZERO_CHECK.vcxproj\n└─ ZERO_CHECK.vcxproj.filters\n\n</code></pre>\n<p>你需要用 <code>Visual Studio</code>  来打开 <code>.sln</code>  项目文件，然后运行，才能够生成可执行程序。<br />\n<img data-src=\"https://cdn.statically.io/gh/AliceWantToBackUw/blog-img@main/PicGo/202404211409965.png\" alt=\"image-20240421131922690\" /></p>\n<p>生成成功，你可在项目根路径查看到 <code>debug</code>  目录，其中有个 <code>03make.exe</code> （你自己在 CMakeLists.txt 设置名字）可执行程序<br />\n<img data-src=\"https://cdn.statically.io/gh/AliceWantToBackUw/blog-img@main/PicGo/202404211410700.png\" alt=\"image-20240421132357270\" /></p>\n<p>回到 <code>Visual Studio</code> ，将 <code>03make</code>  项目<strong>设为启动项目</strong><br />\n<img data-src=\"https://cdn.statically.io/gh/AliceWantToBackUw/blog-img@main/PicGo/202404211410069.png\" alt=\"image-20240421132537978\" /></p>\n<p>点击<strong>本地 Windows 调试器</strong>即可<br />\n<img data-src=\"https://cdn.statically.io/gh/AliceWantToBackUw/blog-img@main/PicGo/202404211410806.png\" alt=\"image-20240421132704416\" /></p>\n<h3 id=\"32通过生成makefiles文件再由mingw编译而得\"><a class=\"anchor\" href=\"#32通过生成makefiles文件再由mingw编译而得\">#</a> 3.2\t通过生成 makefiles 文件，再由 MinGW 编译而得</h3>\n<blockquote>\n<p>参考文章：<span class=\"exturl\" data-url=\"aHR0cDovL3QuY3NkbmltZy5jbi9tOUpxVw==\">http://t.csdnimg.cn/m9JqW</span></p>\n</blockquote>\n<p>首先，先清理一下上面创建<strong> vs 工程文件</strong>。由于之前使用直接在<strong>项目根目录</strong>使用 cmake 命令（即 <code>cmake .</code> ），因此所生成的<strong> vs 工程文件</strong>，也会和原先的代码杂糅在一起。所以，只能够手动删除，保留源码和 <code>CMakeLists.txt</code> 。<br />\n至于如何高效的删除，请阅读这篇文章 [待补充](<span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZW5rdS5jc2RuLm5ldC9hbnN3ZXIvOWNlMTUwNzlhMTM5NDRmNmFjYzhjZjA1OWYwOWQ3NWIjOn46dGV4dD1jbWFrZQ==\">https://wenku.csdn.net/answer/9ce15079a13944f6acc8cf059f09d75b#:~:text=cmake</span> 如何清理 1 使用 CMake 的 clean 命令：在项目的构建目录中运行以下命令可以清理生成的文件： cmake --build  ,  --target  distclean 其中，  是项目的构建目录。)</p>\n<p>以下是删除后的项目结构</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>03cmake</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>├─ .vscode</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>│  ├─ c_cpp_properties.json</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>│  └─ tasks.json</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>├─ add.cpp</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>├─ CMakeLists.txt</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>├─ div.cpp</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>├─ head.h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>├─ main.cpp</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>├─ mult.cpp</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>├─ README.md</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>└─ sub.cpp</pre></td></tr></table></figure><p>在项目根目录输入以下命令</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake -S ./ -B ./ -G <span class=\"token string\">\"MinGW Makefiles\"</span></pre></td></tr></table></figure><p>使用该命令可以直接生成 <code>makefiles</code>  文件<img data-src=\"https://cdn.statically.io/gh/AliceWantToBackUw/blog-img@main/PicGo/202404211411539.png\" alt=\"image-20240421134833521\" /></p>\n<p>然后可以通过以下命令，在项目根目录中调用 <code>MinGW</code>  里面中 <code>mingw32-make.exe</code>  程序编译生成。（这里我重命名为了 <code>make.exe</code> ）</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>make</pre></td></tr></table></figure><p>即可在当前目录下，生成可执行文件 <code>03make.exe</code> <br />\n<img data-src=\"https://cdn.statically.io/gh/AliceWantToBackUw/blog-img@main/PicGo/202404211411128.png\" alt=\"image-20240421135257330\" /></p>\n<p>运行即可</p>\n<pre><code>.\\03make.exe\n</code></pre>\n<p><img data-src=\"https://cdn.statically.io/gh/AliceWantToBackUw/blog-img@main/PicGo/202404211413547.png\" alt=\"image-20240421135413439\" /></p>\n",
            "tags": [
                "Visual Studio Code",
                "CMake",
                "Visual Studio",
                "MinGW"
            ]
        }
    ]
}